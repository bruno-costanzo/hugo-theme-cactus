@mixin antialias() {
  -moz-osx-font-smoothing: grayscale;
  -webkit-font-smoothing: antialiased;
}
@mixin hyphens($value) {
  hyphens: $value;
  -moz-hyphens: $value;
  -ms-hyphens: $value;
  -webkit-hyphens: $value;
}
@mixin underline($size, $color) {
  background-image: linear-gradient(transparent, transparent $size, $color $size, $color);
  background-position: bottom;
  background-size: 100% 6px;
  background-repeat: repeat-x;
}
@mixin no-select() {
  user-select: none;
  -khtml-user-select: none;
}

// Responsive breakpoints
$breakpoint-mobile: 480px;
$breakpoint-tablet: 768px;
$breakpoint-desktop: 1024px;
$breakpoint-wide: 1440px;

@mixin respond-to($breakpoint) {
  @if $breakpoint == 'mobile' {
    @media (max-width: $breakpoint-mobile) {
      @content;
    }
  }
  @else if $breakpoint == 'tablet' {
    @media (min-width: #{$breakpoint-mobile + 1px}) and (max-width: $breakpoint-tablet) {
      @content;
    }
  }
  @else if $breakpoint == 'desktop' {
    @media (min-width: #{$breakpoint-tablet + 1px}) and (max-width: $breakpoint-desktop) {
      @content;
    }
  }
  @else if $breakpoint == 'wide' {
    @media (min-width: #{$breakpoint-desktop + 1px}) {
      @content;
    }
  }
}

// Fluid typography
@mixin fluid-type($min-font-size, $max-font-size, $min-vw: 320px, $max-vw: 1440px) {
  font-size: $min-font-size;
  
  @media (min-width: $min-vw) {
    font-size: calc(#{$min-font-size} + #{strip-unit($max-font-size - $min-font-size)} * ((100vw - #{$min-vw}) / #{strip-unit($max-vw - $min-vw)}));
  }
  
  @media (min-width: $max-vw) {
    font-size: $max-font-size;
  }
}

@function strip-unit($number) {
  @if type-of($number) == 'number' and not unitless($number) {
    @return $number / ($number * 0 + 1);
  }
  @return $number;
}